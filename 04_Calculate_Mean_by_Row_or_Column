Problem Statement:
------------------
Calculate Mean by Row or Column (easy)
âœ”
Write a Python function that calculates the mean of a matrix either by row or by column, based on a given mode. The function should take a matrix (list of lists) and a mode ('row' or 'column') as input and return a list of means according to the specified mode.
Example
Example1:
        input: matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], mode = 'column'
        output: [4.0, 5.0, 6.0]
        reasoning: Calculating the mean of each column results in [(1+4+7)/3, (2+5+8)/3, (3+6+9)/3].
        
        Example 2:
        input: matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], mode = 'row'
        output: [2.0, 5.0, 8.0]
        reasoning: Calculating the mean of each row results in [(1+2+3)/3, (4+5+6)/3, (7+8+9)/3].

Solution:
---------
def calculate_matrix_mean(matrix: list[list[float]], mode: str) -> list[float]:
	means = []
	
	# Approach 1
	# if mode == 'row':
		# for i in matrix:
			# # print("i = ", i )
			# row_sum = 0
			# row_mean = 0
			# for j in i:
				# row_sum += j
			# # print("row_sum = ", row_sum)
			# # print("length of row = ", len(i))
			# row_mean = row_sum/len(i)
			# means.append(row_mean)
	
	# if mode == 'column':
		# matrix = [list(i) for i in zip(*matrix)]
		# # print(matrix)
		# for col in matrix:
			# col_sum = 0
			# col_mean = 0
			# for j in col:
				# col_sum += j
			# col_mean = col_sum/len(col)
			# means.append(col_mean)
			
	# Approach 2
	means = []
	
	if mode == 'row':
		return [sum(row)/len(row) for row in matrix]
	elif mode == 'column':
		return [sum(col)_/len(col) for col in zip(*matrix)]

			
	
	return means


Learnings:
----------
- To calculate mean by column, we can just transpose the matrix and then calculate the mean by rows
- Good practice to raise value error if mode is neither of 'row' or 'column'

