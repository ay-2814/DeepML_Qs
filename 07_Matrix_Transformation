Problem Statement:
-------------------
Matrix Transformation (medium)
âœ”
Write a Python function that transforms a given matrix A using the operation 
, where T and S are invertible matrices. The function should first validate if the matrices T and S are invertible, and then perform the transformation. In cases where there is no solution return -1
Example
Example:
        input: A = [[1, 2], [3, 4]], T = [[2, 0], [0, 2]], S = [[1, 1], [0, 1]]
        output: [[0.5,1.5],[1.5,3.5]]
        reasoning: The matrices T and S are used to transform matrix A by computing $T^{-1}AS$.


Solution:
----------
import numpy as np

def transform_matrix(A: list[list[int|float]], T: list[list[int|float]], S: list[list[int|float]]) -> list[list[int|float]]:
	# Convert matrix to numpy arrays for easier manipulation
	A = np.array(A, dtype = float)
	T = np.array(T, dtype = float)
	S = np.array(S, dtype = float)
	
	# print(A, T, S)
	
	if np.linalg.det(T) == 0 or np.linalg.det(S) == 0:
		# raise ValueError("The matrices T and/or S are not invertible")
		return -1
	
	# Compute inverse of T
	T_inv = np.linalg.inv(T)
	
	# Perform the matrix transformation 
	transformed_matrix = T_inv @ A @ S
	
	return transformed_matrix


Learnings:
----------
- Definition of invertible and non-invertible matrices
- np.linalg.det 
- np.linalg.inv
- @ for dot product
